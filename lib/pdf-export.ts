import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'

export interface ExportOptions {
  format: 'pdf' | 'json' | 'txt'
  filename: string
  title: string
  subtitle?: string
}

export interface ResumeAnalysisData {
  score: number
  strengths: string[]
  weaknesses: string[]
  suggestions: string[]
  keywords: string[]
  missingKeywords: string[]
  overallFeedback: string
  timestamp: string
}

export interface JobAnalysisData {
  jobTitle: string
  company: string
  matchScore: number
  requiredSkills: string[]
  matchingSkills: string[]
  missingSkills: string[]
  recommendations: string[]
  timestamp: string
}

export interface SpeechAnalysisData {
  confidence: number
  speakingRate: number
  fillerWords: number
  transcript: string
  feedback: string[]
  timestamp: string
}

class PDFExportService {
  private doc: jsPDF

  constructor() {
    this.doc = new jsPDF()
  }

  private addHeader(title: string, subtitle?: string) {
    // Add logo/header
    this.doc.setFillColor(59, 130, 246) // Blue color
    this.doc.rect(0, 0, 210, 30, 'F')
    
    // Title
    this.doc.setTextColor(255, 255, 255)
    this.doc.setFontSize(20)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('AI Interview Assistant', 20, 20)
    
    // Subtitle
    if (subtitle) {
      this.doc.setFontSize(12)
      this.doc.setFont('helvetica', 'normal')
      this.doc.text(subtitle, 20, 28)
    }
    
    // Main title
    this.doc.setTextColor(59, 130, 246)
    this.doc.setFontSize(24)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text(title, 20, 50)
    
    // Reset text color
    this.doc.setTextColor(0, 0, 0)
  }

  private addSection(title: string, y: number): number {
    this.doc.setFontSize(16)
    this.doc.setFont('helvetica', 'bold')
    this.doc.setTextColor(59, 130, 246)
    this.doc.text(title, 20, y)
    
    // Add underline
    this.doc.setDrawColor(59, 130, 246)
    this.doc.line(20, y + 2, 190, y + 2)
    
    return y + 15
  }

  private addText(text: string, y: number, fontSize: number = 12): number {
    this.doc.setFontSize(fontSize)
    this.doc.setFont('helvetica', 'normal')
    this.doc.setTextColor(0, 0, 0)
    
    // Handle text wrapping
    const maxWidth = 170
    const lines = this.doc.splitTextToSize(text, maxWidth)
    
    this.doc.text(lines, 20, y)
    
    return y + (lines.length * fontSize * 0.4) + 5
  }

  private addList(items: string[], y: number, fontSize: number = 12): number {
    let currentY = y
    
    items.forEach((item, index) => {
      const bulletPoint = `• ${item}`
      currentY = this.addText(bulletPoint, currentY, fontSize)
    })
    
    return currentY
  }

  private addScoreCard(label: string, score: number, y: number): number {
    // Score background
    this.doc.setFillColor(59, 130, 246, 0.1)
    this.doc.roundedRect(20, y, 170, 25, 3, 3, 'F')
    
    // Border
    this.doc.setDrawColor(59, 130, 246)
    this.doc.roundedRect(20, y, 170, 25, 3, 3, 'S')
    
    // Label
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'bold')
    this.doc.setTextColor(59, 130, 246)
    this.doc.text(label, 30, y + 15)
    
    // Score
    this.doc.setFontSize(20)
    this.doc.setFont('helvetica', 'bold')
    this.doc.setTextColor(59, 130, 246)
    this.doc.text(`${score}%`, 150, y + 18)
    
    return y + 35
  }

  private addFooter() {
    const pageCount = this.doc.getNumberOfPages()
    
    for (let i = 1; i <= pageCount; i++) {
      this.doc.setPage(i)
      
      // Footer line
      this.doc.setDrawColor(200, 200, 200)
      this.doc.line(20, 280, 190, 280)
      
      // Footer text
      this.doc.setFontSize(10)
      this.doc.setFont('helvetica', 'normal')
      this.doc.setTextColor(128, 128, 128)
      this.doc.text(`Generated by AI Interview Assistant - Page ${i} of ${pageCount}`, 20, 285)
      this.doc.text(new Date().toLocaleDateString(), 150, 285)
    }
  }

  async exportResumeAnalysis(data: ResumeAnalysisData, options: ExportOptions): Promise<void> {
    if (options.format === 'pdf') {
      await this.generateResumeAnalysisPDF(data, options)
    } else if (options.format === 'json') {
      this.exportAsJSON(data, options.filename)
    } else if (options.format === 'txt') {
      this.exportAsTXT(this.formatResumeAnalysisAsText(data), options.filename)
    }
  }

  async exportJobAnalysis(data: JobAnalysisData, options: ExportOptions): Promise<void> {
    if (options.format === 'pdf') {
      await this.generateJobAnalysisPDF(data, options)
    } else if (options.format === 'json') {
      this.exportAsJSON(data, options.filename)
    } else if (options.format === 'txt') {
      this.exportAsTXT(this.formatJobAnalysisAsText(data), options.filename)
    }
  }

  async exportSpeechAnalysis(data: SpeechAnalysisData, options: ExportOptions): Promise<void> {
    if (options.format === 'pdf') {
      await this.generateSpeechAnalysisPDF(data, options)
    } else if (options.format === 'json') {
      this.exportAsJSON(data, options.filename)
    } else if (options.format === 'txt') {
      this.exportAsTXT(this.formatSpeechAnalysisAsText(data), options.filename)
    }
  }

  private async generateResumeAnalysisPDF(data: ResumeAnalysisData, options: ExportOptions): Promise<void> {
    this.doc = new jsPDF()
    
    let y = 20
    
    // Header
    this.addHeader('Resume Analysis Report', options.subtitle)
    y = 70
    
    // Score Card
    y = this.addScoreCard('Overall Score', data.score, y)
    y += 10
    
    // Strengths Section
    y = this.addSection('Key Strengths', y)
    y = this.addList(data.strengths, y)
    y += 10
    
    // Weaknesses Section
    y = this.addSection('Areas for Improvement', y)
    y = this.addList(data.weaknesses, y)
    y += 10
    
    // Suggestions Section
    y = this.addSection('Recommendations', y)
    y = this.addList(data.suggestions, y)
    y += 10
    
    // Keywords Section
    y = this.addSection('Keywords Analysis', y)
    y = this.addText(`Found Keywords: ${data.keywords.join(', ')}`, y)
    y += 5
    y = this.addText(`Missing Keywords: ${data.missingKeywords.join(', ')}`, y)
    y += 10
    
    // Overall Feedback
    y = this.addSection('Overall Feedback', y)
    y = this.addText(data.overallFeedback, y)
    y += 10
    
    // Timestamp
    y = this.addSection('Analysis Details', y)
    y = this.addText(`Analysis completed on: ${data.timestamp}`, y)
    
    // Footer
    this.addFooter()
    
    // Save PDF
    this.doc.save(`${options.filename}.pdf`)
  }

  private async generateJobAnalysisPDF(data: JobAnalysisData, options: ExportOptions): Promise<void> {
    this.doc = new jsPDF()
    
    let y = 20
    
    // Header
    this.addHeader('Job Analysis Report', options.subtitle)
    y = 70
    
    // Job Info
    y = this.addSection('Job Information', y)
    y = this.addText(`Position: ${data.jobTitle}`, y)
    y = this.addText(`Company: ${data.company}`, y)
    y += 10
    
    // Match Score
    y = this.addScoreCard('Match Score', data.matchScore, y)
    y += 10
    
    // Required Skills
    y = this.addSection('Required Skills', y)
    y = this.addList(data.requiredSkills, y)
    y += 10
    
    // Matching Skills
    y = this.addSection('Your Matching Skills', y)
    y = this.addList(data.matchingSkills, y)
    y += 10
    
    // Missing Skills
    y = this.addSection('Skills to Develop', y)
    y = this.addList(data.missingSkills, y)
    y += 10
    
    // Recommendations
    y = this.addSection('Recommendations', y)
    y = this.addList(data.recommendations, y)
    y += 10
    
    // Timestamp
    y = this.addSection('Analysis Details', y)
    y = this.addText(`Analysis completed on: ${data.timestamp}`, y)
    
    // Footer
    this.addFooter()
    
    // Save PDF
    this.doc.save(`${options.filename}.pdf`)
  }

  private async generateSpeechAnalysisPDF(data: SpeechAnalysisData, options: ExportOptions): Promise<void> {
    this.doc = new jsPDF()
    
    let y = 20
    
    // Header
    this.addHeader('Speech Analysis Report', options.subtitle)
    y = 70
    
    // Performance Metrics
    y = this.addSection('Performance Metrics', y)
    
    // Score cards for metrics
    y = this.addScoreCard('Confidence', data.confidence, y)
    y += 5
    y = this.addScoreCard('Speaking Rate', data.speakingRate, y)
    y += 5
    y = this.addScoreCard('Filler Words', data.fillerWords, y)
    y += 10
    
    // Feedback
    y = this.addSection('Feedback & Suggestions', y)
    y = this.addList(data.feedback, y)
    y += 10
    
    // Transcript
    y = this.addSection('Transcript', y)
    y = this.addText(data.transcript, y, 10)
    y += 10
    
    // Timestamp
    y = this.addSection('Analysis Details', y)
    y = this.addText(`Analysis completed on: ${data.timestamp}`, y)
    
    // Footer
    this.addFooter()
    
    // Save PDF
    this.doc.save(`${options.filename}.pdf`)
  }

  private exportAsJSON(data: any, filename: string): void {
    const jsonString = JSON.stringify(data, null, 2)
    const blob = new Blob([jsonString], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    
    const link = document.createElement('a')
    link.href = url
    link.download = `${filename}.json`
    link.click()
    
    URL.revokeObjectURL(url)
  }

  private exportAsTXT(content: string, filename: string): void {
    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    
    const link = document.createElement('a')
    link.href = url
    link.download = `${filename}.txt`
    link.click()
    
    URL.revokeObjectURL(url)
  }

  private formatResumeAnalysisAsText(data: ResumeAnalysisData): string {
    return `RESUME ANALYSIS REPORT
=====================

Overall Score: ${data.score}/100

KEY STRENGTHS:
${data.strengths.map(s => `• ${s}`).join('\n')}

AREAS FOR IMPROVEMENT:
${data.weaknesses.map(w => `• ${w}`).join('\n')}

RECOMMENDATIONS:
${data.suggestions.map(s => `• ${s}`).join('\n')}

KEYWORDS ANALYSIS:
Found Keywords: ${data.keywords.join(', ')}
Missing Keywords: ${data.missingKeywords.join(', ')}

OVERALL FEEDBACK:
${data.overallFeedback}

Analysis completed on: ${data.timestamp}
Generated by AI Interview Assistant`
  }

  private formatJobAnalysisAsText(data: JobAnalysisData): string {
    return `JOB ANALYSIS REPORT
===================

Position: ${data.jobTitle}
Company: ${data.company}
Match Score: ${data.matchScore}/100

REQUIRED SKILLS:
${data.requiredSkills.map(s => `• ${s}`).join('\n')}

YOUR MATCHING SKILLS:
${data.matchingSkills.map(s => `• ${s}`).join('\n')}

SKILLS TO DEVELOP:
${data.missingSkills.map(s => `• ${s}`).join('\n')}

RECOMMENDATIONS:
${data.recommendations.map(r => `• ${r}`).join('\n')}

Analysis completed on: ${data.timestamp}
Generated by AI Interview Assistant`
  }

  private formatSpeechAnalysisAsText(data: SpeechAnalysisData): string {
    return `SPEECH ANALYSIS REPORT
========================

PERFORMANCE METRICS:
Confidence: ${data.confidence}%
Speaking Rate: ${data.speakingRate} WPM
Filler Words: ${data.fillerWords}

FEEDBACK & SUGGESTIONS:
${data.feedback.map(f => `• ${f}`).join('\n')}

TRANSCRIPT:
${data.transcript}

Analysis completed on: ${data.timestamp}
Generated by AI Interview Assistant`
  }

  // Method to export HTML element as PDF
  async exportHTMLAsPDF(element: HTMLElement, options: ExportOptions): Promise<void> {
    try {
      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff'
      })
      
      const imgData = canvas.toDataURL('image/png')
      const pdf = new jsPDF('p', 'mm', 'a4')
      
      const imgWidth = 210
      const pageHeight = 295
      const imgHeight = (canvas.height * imgWidth) / canvas.width
      let heightLeft = imgHeight
      
      let position = 0
      
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
      heightLeft -= pageHeight
      
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight
        pdf.addPage()
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
        heightLeft -= pageHeight
      }
      
      pdf.save(`${options.filename}.pdf`)
    } catch (error) {
      console.error('Error generating PDF from HTML:', error)
      throw error
    }
  }
}

export const pdfExportService = new PDFExportService()
export default PDFExportService
